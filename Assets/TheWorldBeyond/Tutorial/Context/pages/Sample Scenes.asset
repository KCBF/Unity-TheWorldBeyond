%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 4510294d23d964fe59443526f1ca7c4b, type: 3}
  m_Name: Sample Scenes
  m_EditorClassIdentifier: 
  m_displayName: Sample Scenes
  m_hierarchyName: Sample Scenes
  m_context: {fileID: 11400000, guid: 511920e5bde66e74d9fef28aa07bd48f, type: 2}
  m_markdownFile: {fileID: 0}
  m_priority: 1008
  m_overrideMarkdownText: '# Sample Scenes


    The main scene to build is "TheWorldBeyond.unity."
    Smaller scenes in the project simplify the development experience, located in
    the [Scenes](../Assets/TheWorldBeyond/Scenes) folder:


    ## Passthrough Pet

    ![Passthrough
    Pet](../Media/ScreenshotPassthroughPet.png "Passthrough Pet")


    Explore augmented
    pet behavior here. It provides Scene elements as occluding colliders so Oppy
    convincingly renders behind and avoids furniture. A NavMesh is created for her
    to walk on, and pressing the index trigger on the right controller sets a target
    towards which she navigates. Learn more about Unity''s navigation system from
    [their documentation.](https://docs.unity3d.com/Manual/com.unity.ai.navigation.html)


    *
    NavMesh created from Scene objects in [`NavMeshSurface.BuildNavMesh()`](../Assets/TheWorldBeyond/Scripts/SampleScenes/SamplePetExperience.cs#L30)

    *
    Pet walking via [`NavMeshAgent.SetDestination()`](../Assets/TheWorldBeyond/Scripts/SampleScenes/SamplePetExperience.cs#L54)

    *
    Animation controller demonstrating switching between idle/running

    * Occlusions
    using Scene objects provided by the prefabs in this scene''s `OVRSceneManager`

    *
    Control character look direction with [`SamplePet.DoLookAtBehavior()`](../Assets/TheWorldBeyond/Scripts/SampleScenes/SamplePet.cs#L85)

    *
    Blob shadow to help visually ground virtual content


    ## Passthrough Room

    ![Passthrough
    Room](../Media/ScreenshotPassthroughRoom.png "Passthrough Room")


    Scene
    elements are loaded, and wall/ceiling/door/window game objects are destroyed.
    A modified ball shooter demonstrates collision with Scene elements. This scene
    can serve as a base when your room is the center of a VR playspace.


    * Floor
    outline as mesh via `OVRScenePlaneMeshFilter`

    * Grass distribution using
    floor outline and exterior space in [`SampleBoundaryDebris.CreateBoundaryDebris()`](../Assets/TheWorldBeyond/Scripts/SampleScenes/SampleBoundaryDebris.cs#L48)
    and [`SampleBoundaryDebris.CreateExteriorDebris()`](../Assets/TheWorldBeyond/Scripts/SampleScenes/SampleBoundaryDebris.cs#L82)

    *
    Virtual objects culled when within the room

    * [`VolumeAndPlaneSwitcher`](https://developers.meta.com/horizon/documentation/unity/unity-scene-plane-and-volume-sample)
    automatically converts plane anchors (Deck, Couch) to volumes


    ## Virtual
    Frames

    ![Virtual Frames](../Media/ScreenshotVirtualFrames.png "Virtual Frames")


    Rendering
    a virtual world outside your windows is achieved with rendering tricks shown
    in this scene. Prefabs similar to the overrides in this scene''s OVRSceneManager
    are required. The virtual environment renders first, then the frame-and-depth-occluder
    prefab where windows and doors are. Finally, Scene walls render 0 to alpha, revealing
    Passthrough.


    * Furniture resizer to demonstrate consistent frame width

    *
    Floor fade material at door base

    * Grass at door perimeter instantiated
    in [`SampleDoorDebris.SpawnDebris()`](../Assets/TheWorldBeyond/Scripts/SamplePrefabs/SampleDoorDebris.cs#L29)

    *
    User notification if missing door or windows in Scene data


    ## Voice Transcription

    ![Voice
    Transcription](../Media/ScreenshotVoiceTranscription.png "Voice Transcription")


    This
    sample transcribes the user''s speech to text, including a button supported by
    the Interaction SDK and a text dialog prefab for developers to provide more information
    to users.


    * Get text transcriptions from the [Voice SDK](https://developers.meta.com/horizon/documentation/unity/voice-sdk-overview/)

    *
    Unity Canvas using hands or controllers powered by the [Interaction SDK](https://developers.meta.com/horizon/documentation/unity/unity-isdk-interaction-sdk-overview/)

    *
    *SampleNotif* prefab for displaying information and requesting user action

    *
    Sample code for checking and requesting microphone permissions in [`SampleVoice.CheckPermissionsAndContinue()`](../Assets/TheWorldBeyond/Scripts/SampleScenes/SampleVoice.cs#L70)

'
  m_overrideMarkdownRoot: .\Documentation/
